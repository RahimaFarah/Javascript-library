<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Tic Tac Toe</title>
  <style>
    body { font-family: Arial, sans-serif; text-align: center; margin-top: 30px; }
    #board { display: grid; grid-template-columns: repeat(3, 100px); gap: 5px; margin: 20px auto; }
    .cell { width: 100px; height: 100px; background: #f0f0f0; display: flex; align-items: center; justify-content: center; font-size: 2em; cursor: pointer; }
    .cell.taken { cursor: not-allowed; }
    #message { margin-top: 20px; font-size: 1.2em; }
    button { margin-top: 15px; padding: 10px 20px; font-size: 1em; }
    input { padding: 5px; margin: 5px; }
  </style>
</head>
<body>
  <h1>Tic Tac Toe</h1>

  <div>
    <input type="text" id="player1-name" placeholder="Player 1 Name" />
    <input type="text" id="player2-name" placeholder="Player 2 Name" />
    <button id="start-btn">Start Game</button>
  </div>

  <div id="board"></div>
  <div id="message"></div>
  <button id="restart-btn">Restart Game</button>

  <script>
    // Gameboard Module
    const Gameboard = (() => {
      const board = ["", "", "", "", "", "", "", "", ""];
      const getBoard = () => board;
      const setMark = (index, mark) => {
        if (!board[index]) board[index] = mark;
      };
      const reset = () => board.fill("");
      return { getBoard, setMark, reset };
    })();

    // Player Factory
    const Player = (name, mark) => ({ name, mark });

    // Game Controller Module
    const Game = (() => {
      let player1, player2, currentPlayer, winner = null;

      const start = (name1, name2) => {
        player1 = Player(name1 || "Player 1", "X");
        player2 = Player(name2 || "Player 2", "O");
        currentPlayer = player1;
        winner = null;
        Gameboard.reset();
        DisplayController.render();
        DisplayController.showMessage(`${currentPlayer.name}'s turn (${currentPlayer.mark})`);
      };

      const switchPlayer = () => {
        currentPlayer = currentPlayer === player1 ? player2 : player1;
      };

      const checkWinner = () => {
        const b = Gameboard.getBoard();
        const winPatterns = [
          [0,1,2],[3,4,5],[6,7,8],
          [0,3,6],[1,4,7],[2,5,8],
          [0,4,8],[2,4,6]
        ];
        for (const [a,b,c] of winPatterns) {
          if (Gameboard.getBoard()[a] && Gameboard.getBoard()[a] === Gameboard.getBoard()[b] && Gameboard.getBoard()[a] === Gameboard.getBoard()[c]) {
            winner = currentPlayer;
            return true;
          }
        }
        if (!Gameboard.getBoard().includes("")) {
          winner = "tie";
          return true;
        }
        return false;
      };

      const playTurn = (index) => {
        if (winner || Gameboard.getBoard()[index]) return;
        Gameboard.setMark(index, currentPlayer.mark);
        if (checkWinner()) {
          if (winner === "tie") DisplayController.showMessage("It's a tie!");
          else DisplayController.showMessage(`${winner.name} wins!`);
        } else {
          switchPlayer();
          DisplayController.showMessage(`${currentPlayer.name}'s turn (${currentPlayer.mark})`);
        }
        DisplayController.render();
      };

      return { start, playTurn, getCurrentPlayer: () => currentPlayer, getWinner: () => winner };
    })();

    // Display Controller Module
    const DisplayController = (() => {
      const boardDiv = document.getElementById("board");
      const messageDiv = document.getElementById("message");

      const render = () => {
        boardDiv.innerHTML = "";
        Gameboard.getBoard().forEach((mark, i) => {
          const cell = document.createElement("div");
          cell.classList.add("cell");
          if (mark) cell.classList.add("taken");
          cell.textContent = mark;
          cell.addEventListener("click", () => Game.playTurn(i));
          boardDiv.appendChild(cell);
        });
      };

      const showMessage = (msg) => messageDiv.textContent = msg;

      return { render, showMessage };
    })();

    // Event Listeners
    document.getElementById("start-btn").addEventListener("click", () => {
      const p1 = document.getElementById("player1-name").value;
      const p2 = document.getElementById("player2-name").value;
      Game.start(p1, p2);
    });

    document.getElementById("restart-btn").addEventListener("click", () => {
      const p1 = document.getElementById("player1-name").value;
      const p2 = document.getElementById("player2-name").value;
      Game.start(p1, p2);
    });
  </script>
</body>
</html>
